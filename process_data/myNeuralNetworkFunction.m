function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 29-Apr-2015 17:59:54.
% 
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 5xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [-1.80450172967256;-1.33405514623978;-4.5769974633592;-1.5081906789071;-1.72599357952062];
  x1_step1_gain = [0.543968033486943;0.273508963077482;0.328322155370871;0.66304613467353;0.579376431011999];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [2.2097248782321675;-2.2088415459711617;0.72451677209888532;-1.0448017860416561;0.41579085984763869;-0.51144113402989133;-0.90096807432357595;-0.34177375879203442;-1.9222468110912136;-2.0711972668035141];
  IW1_1 = [-0.20262431205927045 -0.31710739254564441 -0.23665602064656599 -0.84443203518605681 -0.0098272171706567865;0.79632788605073379 -2.7603675960732854 -0.43024950579396065 -0.23832921771212134 0.67220537017645732;-1.0231110591543007 0.51572627035220586 -0.91234142030880838 0.0077299985515441004 2.8034730806980712;0.70344699791767562 0.96830669750214104 -0.6973016863329542 -0.15475534036539154 -1.2780666654265445;0.70446314998447179 2.0783633783635267 -1.1640043950497236 -0.11352126281918407 -0.89373132525547061;-0.49148473622485567 0.0024238453402786256 0.74765248821621577 0.011784095188203295 0.28665836445851911;-0.48546362121505171 -0.29886097160763087 -0.39276575717130174 -0.034986167001044281 -1.3068824139373796;0.10848725418559386 0.062019070817813715 0.75051201811934143 -0.00040609921266425994 -0.013772675830435829;-0.56847174417908075 -1.1217503044892656 -0.68839789875583146 -0.28318104770718572 1.2170733950833124;0.40905146430037226 0.15648147880686139 -2.495744338752182 -0.079138448073692247 -1.2550372172796163];
  
  % Layer 2
  b2 = [-0.53578995102302018;-0.72567246664043494;0.33153157950858203];
  LW2_1 = [-0.12823727922810085 -0.028902172063126265 0.12396674398136014 0.37167703548037134 -0.095096270956541801 -1.2870701654178105 -0.42206922741330677 1.1114424030602958 -0.13210419546053992 -0.46034279810149914;0.53898248229763857 -0.22748210820936607 0.090529744175055965 -0.54018109738702358 0.22427256309349047 -0.45067084090982229 -0.12153195000779372 0.3604322924422777 0.059721275574030681 0.94981581341857546;-0.049617458246968373 0.042264622436523687 -0.024367130821536735 0.40011702741448302 -0.17710349355196933 0.23697599744961645 0.034105501902607117 0.89400776079029831 -0.016530452355200849 -0.51684001832133164];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = [0.543851666610474;0.273478764820558;0.328234304536777];
  y1_step1_xoffset = [-1.80509538875021;-1.33433285742553;-4.57739809490106];
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end

function [Y,Xf,Af] = myNeuralNetworkFunction2(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 28-Apr-2015 21:55:56.
% 
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [-1.80450172967256;-1.33405514623978;-4.5769974633592;-1.5081906789071];
  x1_step1_gain = [0.543968033486943;0.273508963077482;0.328322155370871;0.66304613467353];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [0.76363167029183099;-2.0601997931703835;-2.429798981689844;-0.9950700125788714;0.72602869788456892;-0.14941542559269169;0.44812177071546505;-0.091853300196557047;2.1390741542576226;-1.85200162185405];
  IW1_1 = [-0.00025798897438197074 -0.13357244714653962 0.65380454216602113 -0.00072315336478024803;0.3450999481966418 -0.25333312370089284 -2.260085474818013 -0.07599969465075461;1.8765268971846458 -0.1298373851769466 2.9601899734257926 -0.021522959269987388;1.261727017782597 -0.51116570441174891 -3.1346801434094833 -0.72140639102293658;-0.017102112522126039 0.12894182397547127 -0.56608907503393679 -0.00032905231287396277;-0.71818275633428585 0.69136796723015248 1.9254073184943807 0.13281846800426431;0.51705180885450919 0.10771575459569396 -0.51708935070980033 -0.0095279091825408863;-0.0015371876306354939 -0.36210429382832976 -0.22114872410484099 3.3598166005230239e-05;0.84075005071065212 -2.1028968848510194 -0.027059370837946364 1.8397677907501533;-1.3329990819436601 -0.41254431503838551 0.3388947277300976 -0.89009052087453966];
  
  % Layer 2
  b2 = [-0.10046459032577168;-0.29829284031063974;0.086550241096153363];
  LW2_1 = [-0.18711158041508974 -0.60813561736603439 -0.061450128895724911 0.016461914697207394 -1.7437340743751653 0.19225395355028604 2.1933851198186387 0.038362801136179805 -0.075527179338949035 -0.013526942590951782;-0.67555629017303098 -0.016570133078613856 -0.0013054601051376929 0.0011178405535960459 0.7821270539663826 0.0040994866719380662 0.022788812563922629 -2.4378961533247279 -0.0023933231942609582 -0.00025089643748360584;1.0919169765916745 0.02567934988278562 -0.0007692881268874254 -0.0021592384368848282 -1.2883271968525516 -0.00559411679673883 -0.044245850341979448 -0.54581590262578239 0.0023786004957230063 0.00053936605493416616];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = [0.543851666610474;0.273508963077482;0.328322155370871];
  y1_step1_xoffset = [-1.80509538875021;-1.33405514623978;-4.5769974633592];
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end

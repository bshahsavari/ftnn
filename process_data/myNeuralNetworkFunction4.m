function [Y,Xf,Af] = myNeuralNetworkFunction4(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 29-Apr-2015 17:27:44.
% 
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [-1.33405514623978;-4.5769974633592;-1.5081906789071;-1.72599357952062];
  x1_step1_gain = [0.273508963077482;0.328322155370871;0.66304613467353;0.579376431011999];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [1.7780313161161856;-0.65449841909513606;-1.6607758176103271;4.9729984193344672;-0.052155828551334479;1.0470826486550115;-0.014806591122431647;-0.21795957917791461;-1.4889743221913454;-0.32039190249213356];
  IW1_1 = [-0.63451918960825571 1.6708779004958623 0.037879621106428771 0.48075499458430138;1.6117395507561829 -0.065377615975004577 -0.038664188324633544 -0.88144147117604499;0.36440425847363983 2.3817328091669365 1.0676413320439648 0.15838527634887112;-4.096320413402494 -2.3212302442666704 4.2481500723611081 -0.22779017043426694;-2.051006640954836 0.5689292638838529 0.21946412193680809 -1.5363282645552254;0.68779248124718684 -1.2059155120224467 0.63885383598646472 -0.0062615996572144431;-2.0085653543237987 0.6962110491242316 0.21094022777544474 -1.113981170571908;-2.1417435324833987 0.65721602665842904 0.26085559658160601 -1.9692115399382819;-2.1980369938895161 -0.25689943449228608 0.032380408803290503 0.026623158487060643;-0.50004720180595263 0.46999757010224058 0.0092427113490511532 0.031127635325058224];
  
  % Layer 2
  b2 = [-0.655554234201423;-0.082677559582213539];
  LW2_1 = [-0.87519164422607143 -0.34576762416171458 -0.059560069597080739 0.52877888075718038 2.6924438342985355 0.1109527723977714 -1.8719975348310434 -1.0147394223664523 -0.56566454450591652 0.39698756789977929;0.52203469505953837 0.43253854235242811 0.0682508333257449 0.13440566410879773 -1.4945571360192058 -0.10709387048329597 0.92535087048111597 0.61129511684633897 -0.23293481384953499 1.2610488421209076];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = [0.273478764820558;0.328234304536777];
  y1_step1_xoffset = [-1.33433285742553;-4.57739809490106];
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end

function [Y,Xf,Af] = n1(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 29-Apr-2015 19:41:25.
% 
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 6xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [-1.79845102135337;-1.33160203319191;-4.58189413643416;-1.50291840772539;-1.72066804270431;-1.59326175776938];
  x1_step1_gain = [0.544331853129093;0.27317990525762;0.328224250837979;0.663072145640669;0.579562588760473;0.627668363420765];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [3.9738017358824052;0.44342691183067806;0.75956175975366025;-1.7964701671524448;1.0412673425331336;0.66457052270439831;-1.3580249640183943;-0.20026220326621078;2.2227605718404413;3.9451130127542924];
  IW1_1 = [-1.4665103032469453 -0.51043480522621687 0.71909469901466716 2.6331544103835833 -0.089158106842180979 -0.074685259805730722;-0.24294109398612038 0.64531295348838325 0.82126104821306878 -0.08145151296217433 -0.17468159100623937 -0.0028836320271071387;-1.0989751770190397 -0.74276284443799379 1.6303152795017326 -0.34474866107106 -1.1323436776074538 -0.17948980322959127;-4.0863197244762262 -2.285800568308058 -2.334673461756366 -4.2042914100950783 -1.051099950234021 0.030853071466875666;0.43244399976495379 0.92395443297919488 -0.092242349818039346 -0.11208089353596208 -2.8116426744707206 -0.07279090328883378;0.36350236236181349 -0.10684628601549008 -0.34155548856460849 0.10968304196412265 -0.64015585105112705 -0.047470756542008927;-1.1175026141611839 -1.1872435866002897 0.56649374744448588 0.23581413423129199 3.1562843274762526 0.017687705469822502;0.090964982435214795 0.23449827858011402 -0.48848542553680629 -0.015647123454358376 3.6625266703958053 0.19788051124658654;-0.27433678308413234 1.2119932333809911 3.8137735774070585 0.05711813331782116 0.79334929957029243 0.16737308891353675;0.74026807733936728 1.2104368857134897 0.17363582254644774 0.032683992504263744 4.0636918245667912 0.28528344645874654];
  
  % Layer 2
  b2 = [-2.105088490581438;-2.3675985989490367;1.9247599530784405];
  LW2_1 = [0.23776402466201069 0.90438812281255843 0.09654905797331402 0.043689134712795584 -1.2087748559488014 1.8839081211289264 -0.87597882268078708 0.048244994576073827 0.12995652249125575 0.762094740616721;1.4755485457883049 0.11346215392693865 0.16626405153944029 0.012201752545496693 0.46161932394384053 0.43369137227379717 -0.084374884675410336 0.56715907752716843 -0.33811315089299071 0.24211963874442244;-1.7492560847955296 0.85313831898263537 -0.30893018818732221 -0.030362055031255372 -1.1592651916941674 0.079391934413419865 -0.15606900508195903 -0.82729865011556858 0.34832936394702591 -0.048607184125565361];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = [0.54436314239209;0.27387365883192;0.328505215039633];
  y1_step1_xoffset = [-1.79876912504741;-1.32957932799142;-4.57707965795335];
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end

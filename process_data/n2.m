function [Y,Xf,Af] = n2(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 29-Apr-2015 21:06:30.
% 
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 6xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [-1.83086560281989;-1.35011978942538;-4.4884621654788;-1.50775132409295;-1.72713478596767;-1.57538589853066];
  x1_step1_gain = [0.545893574061116;0.276574750282156;0.332994223083958;0.662321863499224;0.567890122795933;0.64665137289324];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [-3.0117350155992217;1.6497649010565902;0.95819172111044837;3.1731988515653571;1.8433722940037132;2.6059856913678887;0.22146804454878041;1.6236981022678907;-1.7263629368600915;11.242869507597044];
  IW1_1 = [0.22689457593574003 -1.578671474232886 -6.051146976208658 -0.014606782984085359 -1.8181989024782643 -0.13580216524127309;0.20360429499857288 1.1773905435124457 -0.075187008303248218 -0.1638613981781912 -3.4672701284700356 -0.16744665194282954;-1.0664302821020495 7.5099925445423326 -3.659374630700718 -6.8851714119635714 -0.51145302936416726 0.22869452748723645;0.6704377007809359 -0.43732255207378834 0.064060581584481899 -0.054065557527111237 7.7462686051576872 0.22223918123742642;-0.38198679955282516 1.455595451179309 0.27977315934311192 -0.068917165552318443 -0.060305762706223141 0.013226260794360373;0.76390172607101692 0.47790833597256305 0.045499916641266618 -0.05401697816051583 4.2014179127082496 0.26108386995635413;-0.026019041936486118 1.562326246014919 -0.40840080756590647 0.14902763085426673 4.5275372798984348 0.31871386581020156;-0.21977211774007419 1.4282951063880878 -0.038682937995673954 -0.066598838225062199 -0.2510132736672695 0.0014800410691752234;0.04838363713633069 -1.5984400306522735 0.21628362513654148 0.062504861314200452 0.54348679271810874 0.020117818387129203;-0.90172356481267479 0.58644884010820075 1.0262922166099553 -9.1008227933604466 0.38888141565965356 -0.095210514847425778];
  
  % Layer 2
  b2 = [-1.8568975583917693;-2.2086646482552994;-0.071121954993493525];
  LW2_1 = [-0.19534789705420688 0.033845097003567595 0.017193172392100425 -1.4819846065789115 5.3903022549429149 2.1686747884335182 0.13496871380283515 -9.4896948699522135 -5.1205950859043128 0.11201073247753777;0.25082540635183126 0.43212247871840109 -0.055543328520820882 -0.40862169406465298 0.40499411906401234 0.62080852268598374 0.38467662299286343 -1.4710468189352723 -0.87172190451822185 1.6904373976316061;-0.33644664681124098 -0.71216443889549952 0.064798936333420543 -0.0042007343873523822 6.4604816343464693 -0.030861398470208322 -0.57636901329358203 -5.8826100208508167 -2.2553180152520849 -2.2613941782555815];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = [0.536415281977557;0.275407092675733;0.334021898088854];
  y1_step1_xoffset = [-1.88028181265793;-1.36505660860528;-4.48109472047471];
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end

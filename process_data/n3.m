function [Y,Xf,Af] = n3(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 29-Apr-2015 21:41:44.
% 
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 6xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [-1.80878814037101;-1.3361440500766;-4.5660408610632;-1.50817765705409;-1.72633843992027;-1.86122338189635];
  x1_step1_gain = [0.543767860321615;0.273702415907275;0.328985825673937;0.662941350879243;0.579673132229956;0.833860146057048];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [-0.25181705689604089;2.8765103503877434;-2.8566726609490352;0.45306595303172392;0.85828110168204241;-0.12330851769749449;1.5692291102113174;1.1712398912253625;0.33907427318810851;3.3838978878594164];
  IW1_1 = [-0.033638059700065705 0.31633881277774445 0.92369133403268244 -0.02460476260186743 -0.29931682304235779 -0.002389986487343588;-0.74658611615652415 0.44510089638049438 4.0987914839768012 0.093736012853695094 0.81659649091132314 -0.016794007044943552;-0.37800647411096294 -3.1807273703448491 -0.1310386326472894 0.19739372911216618 2.9709096620108824 -0.013998232848772918;-0.65754113087558297 0.53270583772803037 -0.81431058583897475 -0.0011349688747713518 2.1843112399263473 0.0046511269667279947;0.3684537003681137 2.8157672214543412 -1.6392080734199672 0.0093825721782817423 -0.99427305189408577 -0.0054511224291504626;-0.39725225734962777 -0.052429611429291825 -0.26776678930208286 -0.031543126721516622 -0.12822282592528877 -0.0037144789779236234;1.3943373880037118 0.3342484931954553 1.1068855752916249 1.671399755383995 0.37404988707402109 0.13617544067784257;0.40430560537025706 0.38361419172805455 0.12340988016366333 -0.048847252201489028 1.2267235804549022 0.0026141920382993364;0.44757195846737835 -0.28812384229326987 -0.85029823753992895 0.037748342423392173 0.0095232550721699293 0.0023136107991831244;-0.45856887922784678 -0.38540675345522313 0.30137885712741519 2.6597886701204274 0.094851427559307505 -0.019078834505860974];
  
  % Layer 2
  b2 = [-0.7371536357963937;-0.66391569708731002;0.30706954479904852];
  LW2_1 = [1.9895977569959613 0.21635668599145375 -0.087523130395145324 0.31118636497174085 -0.092102242366945627 0.10303128839969986 0.0010600628985161535 0.48474100972906947 2.0842455290185322 0.013645408860482912;0.97387729566925985 -0.33547190676583588 -0.13536201954884874 0.28820069998477293 0.11577382166774684 0.51497980573644764 0.020517896477212291 0.25478520100231711 0.88864712040905169 0.30716596452666595;-0.068496530761454621 0.1401168979553985 0.090832652697863697 -0.14284428690380971 -0.12592064287481827 -0.90321060652571195 -0.013582784210211045 -0.11525802610410218 -0.80392624811767155 -0.074224523536126838];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = [0.543535411526731;0.273731201149389;0.32886997527436];
  y1_step1_xoffset = [-1.80970549176494;-1.33637369490009;-4.56714558497373];
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end

function [Y,Xf,Af] = n4(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 30-Apr-2015 19:25:46.
% 
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 6xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [-1.80562760469811;-1.33425304459187;-4.57812527692154;-1.50731720929285;-1.72602495375932;-1.86804475389517];
  x1_step1_gain = [0.543882184198173;0.273528322565208;0.328260035151265;0.663353811142186;0.579113147711752;0.832174098261983];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [-1.1362157101160264;0.67224419337758778;-1.2128933791778524;-0.24205350629218131;0.037440258952924368;-0.0038708665980133478;0.03720807130506959;0.51298662803410688;-0.98092450568252221;-2.3804028806201538];
  IW1_1 = [0.094922842220088344 4.1813999594592364 0.48272315739109534 -0.079669030424186577 -1.9714510520728425 0.44815208109388077;0.32623075933357559 2.1003428297261411 -1.0258600910181643 -0.036726579103155924 0.060461431850690806 0.13731348885643616;0.72209257443517705 0.88976473244721443 -1.6925567581037337 0.055179598461546395 0.5035379335175213 -2.1714203007421879;-0.55802576423411321 2.7181366625700867 -1.5493529371048909 -0.0015025728152769369 1.2433931284316382 -2.6490942280463092;-0.37640721922263698 0.95338956782280271 1.0205595490345634 0.0085390547897989909 -0.098551924138046421 0.029969077440316755;0.68431472458060405 -0.71780271039111043 0.64575968489945068 -0.029808992260061427 0.67758068189502985 0.8390852384884776;-0.80336119103110326 0.67840444846588743 -0.47810243376996298 0.012068278537303053 -0.31654915051578425 0.68428952159501599;0.67044580048893365 -0.08871804321600249 -0.57444865270422696 0.0082583318605615845 -0.2107724607466743 -0.0035666728229006676;-0.3068813966341718 -0.4136263032138523 -0.036371876352944366 -0.0028282739389826539 -1.0489128349297951 0.053533192130092513;0.4460427164282269 0.12929637742689487 -2.0977391814263902 -0.050558075847918167 -0.69715113555924901 0.10671184149862865];
  
  % Layer 2
  b2 = [-0.91378333424627589;0.71410576003973425;-0.040529717494998563];
  LW2_1 = [0.14851093307046054 0.045694082541350406 0.082903926114321042 -0.078427790143345638 0.44939117622021918 0.270398921892614 -0.31020695327640746 1.1932710421190902 -0.22179731007693207 -0.5021469985762349;-0.198481686103188 0.2199048306314727 0.0072233534637638807 0.03314994166923621 0.29529810278245805 -0.064275512486130462 0.078639053437131567 0.38568360988292383 -0.19270388423102414 1.4989836014594586;0.077490406224025782 -0.20214780908523886 0.063681037935650206 -0.094285846544861218 0.49387597680003281 0.30598106085892268 -0.39416497823216567 -0.14606667726525627 0.19602566142426073 -0.34384109533363183];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = [0.543616000152262;0.273704140190804;0.328267644598519];
  y1_step1_xoffset = [-1.80655814610547;-1.33375662135088;-4.57711812512617];
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
